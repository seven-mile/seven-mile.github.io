{"version":3,"file":"component---src-templates-blog-post-typst-js-5f04fc921a60d52120c5.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/options.init.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/internal.types.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/render/canvas/view.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/wasm.mjs","webpack://gatsby-starter-blog/./node_modules/idb/build/wrap-idb-value.js","webpack://gatsby-starter-blog/./node_modules/idb/build/index.js","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/init.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/contrib/dom/typst-doc.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/contrib/dom/typst-cancel.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/dom.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/renderer.mjs","webpack://gatsby-starter-blog/./node_modules/@myriaddreamin/typst.ts/dist/esm/compiler.mjs","webpack://gatsby-starter-blog/./src/components/typst-doc.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post-typst.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/a-possible-prototype.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/array-buffer-basic-detection.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/array-buffer-view-core.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/correct-prototype-getter.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/define-built-in-accessor.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/function-uncurry-this-accessor.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/function-uncurry-this-clause.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/is-possible-prototype.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/object-get-prototype-of.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/object-set-prototype-of.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/to-offset.js","webpack://gatsby-starter-blog/./node_modules/core-js/internals/to-positive-integer.js","webpack://gatsby-starter-blog/./node_modules/core-js/modules/es.typed-array.set.js","webpack://gatsby-starter-blog/./node_modules/core-js/modules/es.typed-array.sort.js"],"sourcesContent":["/**\n * this mark is used to identify the beforeBuild stage\n * @description will not be used in runtime code\n */\nconst BeforeBuildSymbol = Symbol('beforeBuild');\n/** @internal */\nconst _textFonts = [\n    'LinLibertine_R.ttf',\n    'LinLibertine_RB.ttf',\n    'LinLibertine_RBI.ttf',\n    'LinLibertine_RI.ttf',\n    'NewCMMath-Book.otf',\n    'NewCMMath-Regular.otf',\n    'NewCM10-Regular.otf',\n    'NewCM10-Bold.otf',\n    'NewCM10-Italic.otf',\n    'NewCM10-BoldItalic.otf',\n    'DejaVuSansMono.ttf',\n    'DejaVuSansMono-Bold.ttf',\n    'DejaVuSansMono-Oblique.ttf',\n    'DejaVuSansMono-BoldOblique.ttf',\n];\n/** @internal */\nconst _cjkFonts = [\n    'InriaSerif-Bold.ttf',\n    'InriaSerif-BoldItalic.ttf',\n    'InriaSerif-Italic.ttf',\n    'InriaSerif-Regular.ttf',\n    'Roboto-Regular.ttf',\n    'NotoSerifCJKsc-Regular.otf',\n];\n/** @internal */\nconst _emojiFonts = ['TwitterColorEmoji.ttf', 'NotoColorEmoji.ttf'];\n/**\n * disable default font assets\n */\nexport function disableDefaultFontAssets() {\n    return preloadRemoteFonts([], { assets: false });\n}\n/**\n * preload font assets\n */\nexport function preloadFontAssets(options) {\n    return preloadRemoteFonts([], options);\n}\n/**\n * preload remote fonts\n *\n * @param fonts - url path to font files\n * @returns {BeforeBuildFn}\n * @example\n * ```typescript\n * import { init, preloadRemoteFonts } from 'typst';\n * init({\n *   beforeBuild: [\n *     preloadRemoteFonts([\n *      'https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2', // remote url\n *      'dist/fonts/Roboto-Regular.ttf', // relative to the root of the website\n *     ]),\n *   ],\n * });\n * ```\n */\nexport function preloadRemoteFonts(userFonts, options) {\n    const fonts = [...userFonts];\n    if (options &&\n        options?.assets !== false &&\n        options?.assets?.length &&\n        options?.assets?.length > 0) {\n        let assetUrlPrefix = options.assetUrlPrefix ??\n            'https://raw.githubusercontent.com/Myriad-Dreamin/typst/assets-fonts';\n        if (assetUrlPrefix[assetUrlPrefix.length - 1] !== '/') {\n            assetUrlPrefix += '/';\n        }\n        const prefix = (f) => f.map(font => assetUrlPrefix + font);\n        for (const asset of options.assets) {\n            switch (asset) {\n                case 'text':\n                    fonts.push(...prefix(_textFonts));\n                    break;\n                case 'cjk':\n                    fonts.push(...prefix(_cjkFonts));\n                    break;\n                case 'emoji':\n                    fonts.push(...prefix(_emojiFonts));\n                    break;\n            }\n        }\n    }\n    const loader = async (_, { ref, builder }) => {\n        if (options?.fetcher) {\n            ref.setFetcher(options.fetcher);\n        }\n        await ref.loadFonts(builder, fonts);\n    };\n    loader._preloadRemoteFontOptions = options;\n    return loader;\n}\n/**\n * preload system fonts\n * @param byFamily - filter system fonts to preload by family name\n * @returns {BeforeBuildFn}\n * @example\n * ```typescript\n * import { init, preloadSystemFonts } from 'typst';\n * init({\n *   beforeBuild: [\n *     preloadSystemFonts({\n *       byFamily: ['Roboto'], // preload fonts by family name\n *     }),\n *   ],\n * });\n * ```\n */\nexport function preloadSystemFonts({ byFamily }) {\n    return async (_, { builder }) => {\n        const t = performance.now();\n        if ('queryLocalFonts' in window) {\n            const fonts = await window.queryLocalFonts();\n            byFamily = byFamily ?? [];\n            for (const font of fonts) {\n                if (!byFamily.includes(font.family)) {\n                    continue;\n                }\n                const data = await (await font.blob()).arrayBuffer();\n                await builder.add_raw_font(new Uint8Array(data));\n            }\n        }\n        const t2 = performance.now();\n        console.log('preload system font time used:', t2 - t);\n    };\n}\n/**\n * (compile only) set pacoage registry\n *\n * @param accessModel: when compiling, the pacoage registry is used to access the\n * data of files\n * @returns {BeforeBuildFn}\n */\nexport function withPackageRegistry(packageRegistry) {\n    return async (_, { builder }) => {\n        return new Promise(resolve => {\n            builder.set_package_registry(packageRegistry, function (spec) {\n                return packageRegistry.resolve(spec, this);\n            });\n            resolve();\n        });\n    };\n}\n/**\n * (compile only) set access model\n *\n * @param accessModel: when compiling, the access model is used to access the\n * data of files\n * @returns {BeforeBuildFn}\n */\nexport function withAccessModel(accessModel) {\n    return async (_, ctx) => {\n        if (ctx.alreadySetAccessModel) {\n            throw new Error(`already set some assess model before: ${ctx.alreadySetAccessModel.constructor?.name}(${ctx.alreadySetAccessModel})`);\n        }\n        ctx.alreadySetAccessModel = accessModel;\n        return new Promise(resolve => {\n            ctx.builder.set_access_model(accessModel, (path) => {\n                const lastModified = accessModel.getMTime(path);\n                if (lastModified) {\n                    return lastModified.getTime();\n                }\n                return 0;\n            }, (path) => {\n                return accessModel.isFile(path) || false;\n            }, (path) => {\n                return accessModel.getRealPath(path) || path;\n            }, (path) => {\n                return accessModel.readAll(path);\n            });\n            resolve();\n        });\n    };\n}\n// todo: search browser\n// searcher.search_browser().await?;\n//# sourceMappingURL=data:application/json;base64,","export const kObject = Symbol.for('reflexo-obj');\n/**\n * The page information of a Typst document.\n * @property {number} pageOffset - The offset of the page.\n * @property {number} width - The width of the page in pt.\n * @property {number} height - The height of the page in pt.\n */\nexport class PageInfo {\n    pageOffset;\n    width;\n    height;\n}\nexport var TypstDefaultParams;\n(function (TypstDefaultParams) {\n    TypstDefaultParams[TypstDefaultParams[\"PIXEL_PER_PT\"] = 3] = \"PIXEL_PER_PT\";\n})(TypstDefaultParams = TypstDefaultParams || (TypstDefaultParams = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwudHlwZXMubWpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ludGVybmFsLnR5cGVzLm10cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUVqRDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxRQUFRO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixLQUFLLENBQVM7SUFDZCxNQUFNLENBQVM7Q0FDaEI7QUE0REQsTUFBTSxDQUFOLElBQWtCLGtCQUVqQjtBQUZELFdBQWtCLGtCQUFrQjtJQUNsQywyRUFBZ0IsQ0FBQTtBQUNsQixDQUFDLEVBRmlCLGtCQUFrQixHQUFsQixrQkFBa0IsS0FBbEIsa0JBQWtCLFFBRW5DIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGtPYmplY3QgPSBTeW1ib2wuZm9yKCdyZWZsZXhvLW9iaicpO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBwYWdlIGluZm9ybWF0aW9uIG9mIGEgVHlwc3QgZG9jdW1lbnQuXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwYWdlT2Zmc2V0IC0gVGhlIG9mZnNldCBvZiB0aGUgcGFnZS5cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBwYWdlIGluIHB0LlxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgcGFnZSBpbiBwdC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQYWdlSW5mbyB7XHJcbiAgcGFnZU9mZnNldDogbnVtYmVyO1xyXG4gIHdpZHRoOiBudW1iZXI7XHJcbiAgaGVpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRnNBY2Nlc3NNb2RlbCB7XHJcbiAgZ2V0TVRpbWUocGF0aDogc3RyaW5nKTogRGF0ZSB8IHVuZGVmaW5lZDtcclxuICBpc0ZpbGUocGF0aDogc3RyaW5nKTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICBnZXRSZWFsUGF0aChwYXRoOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgcmVhZEFsbChwYXRoOiBzdHJpbmcpOiBVaW50OEFycmF5IHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhY2thZ2VTcGVjIHtcclxuICBuYW1lc3BhY2U6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdmVyc2lvbjogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhY2thZ2VSZXNvbHZlQ29udGV4dCB7XHJcbiAgdW50YXIoZGF0YTogVWludDhBcnJheSwgY2I6IChwYXRoOiBzdHJpbmcsIGRhdGE6IFVpbnQ4QXJyYXksIG10aW1lOiBudW1iZXIpID0+IHZvaWQpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhY2thZ2VSZWdpc3RyeSB7XHJcbiAgcmVzb2x2ZShwYXRoOiBQYWNrYWdlU3BlYywgY29udGV4dDogUGFja2FnZVJlc29sdmVDb250ZXh0KTogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50IHtcclxuICB4OiBudW1iZXI7XHJcbiAgeTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlY3Qge1xyXG4gIGxvOiBQb2ludDtcclxuICBoaTogUG9pbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFRyYW5zZm9ybU1hdHJpeCA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcclxuXHJcbi8vI3JlZ2lvbiBTZW1hbnRpYyB0b2tlbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlL2lzc3Vlcy84NjQxNVxyXG5leHBvcnQgaW50ZXJmYWNlIFNlbWFudGljVG9rZW5zTGVnZW5kIHtcclxuICByZWFkb25seSB0b2tlblR5cGVzOiBzdHJpbmdbXTtcclxuICByZWFkb25seSB0b2tlbk1vZGlmaWVyczogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VtYW50aWNUb2tlbnMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSByZXN1bHQgaWQgb2YgdGhlIHRva2Vucy5cclxuICAgKlxyXG4gICAqIFRoaXMgaXMgdGhlIGlkIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gYERvY3VtZW50U2VtYW50aWNUb2tlbnNQcm92aWRlci5wcm92aWRlRG9jdW1lbnRTZW1hbnRpY1Rva2Vuc0VkaXRzYCAoaWYgaW1wbGVtZW50ZWQpLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IHJlc3VsdElkPzogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IGRhdGE6IFVpbnQzMkFycmF5O1xyXG59XHJcbi8vI2VuZHJlZ2lvblxyXG5cclxuLyoqXHJcbiAqIFRoZSByZXN1bHQgb2YgcmVuZGVyaW5nIGEgVHlwc3QgZG9jdW1lbnQgdG8gYSBjYW52YXMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlckNhbnZhc1Jlc3VsdCB7XHJcbiAgY2FjaGVLZXk6IHN0cmluZztcclxuICBodG1sU2VtYW50aWNzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gVHlwc3REZWZhdWx0UGFyYW1zIHtcclxuICBQSVhFTF9QRVJfUFQgPSAzLFxyXG59XHJcbiJdfQ==","import { TypstDefaultParams } from '../../internal.types.mjs';\n/** @internal */\nexport class RenderView {\n    pageInfos;\n    loadPageCount;\n    imageScaleFactor;\n    container;\n    canvasList;\n    textLayerList;\n    commonList;\n    textLayerParentList;\n    semanticLayerList;\n    constructor(pageInfos, container, options) {\n        this.pageInfos = pageInfos;\n        this.imageScaleFactor = options.pixelPerPt ?? TypstDefaultParams.PIXEL_PER_PT;\n        container.innerHTML = '';\n        container.style.width = '100%';\n        // canvas[data-typst-session='{}']\n        /// refer html elements\n        this.container = container;\n        this.canvasList = new Array(this.loadPageCount);\n        this.textLayerList = new Array(this.loadPageCount);\n        this.commonList = new Array(this.loadPageCount);\n        this.textLayerParentList = new Array(this.loadPageCount);\n        this.semanticLayerList = new Array(this.loadPageCount);\n        const createOver = (i, pageAst, commonDiv) => {\n            const width = Math.ceil(pageAst.width) * this.imageScaleFactor;\n            const height = Math.ceil(pageAst.height) * this.imageScaleFactor;\n            const canvas = (this.canvasList[i] = document.createElement('canvas'));\n            const semanticLayer = (this.semanticLayerList[i] = document.createElement('div'));\n            const textLayer = (this.textLayerList[i] = document.createElement('div'));\n            const textLayerParent = (this.textLayerParentList[i] = document.createElement('div'));\n            const ctx = canvas.getContext('2d');\n            if (ctx) {\n                const canvasDiv = document.createElement('div');\n                canvas.width = width;\n                canvas.height = height;\n                canvasDiv.appendChild(canvas);\n                // canvasDiv.style.zIndex = '-1';\n                // canvas.style.zIndex = '-1';\n                commonDiv.appendChild(canvasDiv);\n                canvasDiv.style.position = 'absolute';\n            }\n            {\n                textLayerParent.appendChild(textLayer);\n                textLayerParent.className = 'typst-html-semantics';\n                /// on width change\n                const containerWidth = container.offsetWidth;\n                const originalScale = containerWidth / pageAst.width;\n                textLayerParent.style.width = `${containerWidth}px`;\n                textLayerParent.style.height = `${pageAst.height * originalScale}px`;\n                // --data-text-width\n                textLayerParent.style.setProperty('--data-text-width', `${originalScale}px`);\n                textLayerParent.style.setProperty('--data-text-height', `${originalScale}px`);\n                // textLayerParent.style.position = 'absolute';\n                commonDiv.classList.add('typst-page');\n                commonDiv.classList.add('canvas');\n                commonDiv.style.width = `${containerWidth}px`;\n                commonDiv.style.height = `${height * originalScale}px`;\n                commonDiv.style.position = 'relative';\n                // textLayerParent.style.zIndex = '1';\n                semanticLayer.appendChild(textLayerParent);\n                commonDiv.appendChild(semanticLayer);\n            }\n        };\n        for (let i = 0; i < this.pageInfos.length; i++) {\n            const pageAst = this.pageInfos[i];\n            // const commonDiv = document.createElement('div');\n            let commonDiv = undefined;\n            commonDiv = this.commonList[i] = document.createElement('div');\n            container.appendChild(commonDiv);\n            createOver(i, pageAst, commonDiv);\n        }\n    }\n    resetLayout() {\n        /// resize again to avoid bad width change after render\n        for (let i = 0; i < this.pageInfos.length; i++) {\n            const pageAst = this.pageInfos[i];\n            const width = Math.ceil(pageAst.width) * this.imageScaleFactor;\n            const height = Math.ceil(pageAst.height) * this.imageScaleFactor;\n            const canvasDiv = this.canvasList[i].parentElement;\n            if (!canvasDiv) {\n                throw new Error(`canvasDiv is null for page ${i}, canvas list length ${this.canvasList.length}`);\n            }\n            const commonDiv = this.commonList[i];\n            const textLayerParent = this.textLayerParentList[i];\n            /// on width change\n            const containerWidth = this.container.offsetWidth;\n            const originalScale = containerWidth / width;\n            textLayerParent.style.width = `${containerWidth}px`;\n            textLayerParent.style.height = `${height * originalScale}px`;\n            commonDiv.style.width = `${containerWidth}px`;\n            commonDiv.style.height = `${height * originalScale}px`;\n            // compute scaling factor according to the paper size\n            const currentScale = this.container.offsetWidth / width;\n            canvasDiv.style.transformOrigin = '0px 0px';\n            canvasDiv.style.transform = `scale(${currentScale})`;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @internal\n */\nconst once = (fn) => {\n    let called = false;\n    let res;\n    return () => {\n        if (called) {\n            return res;\n        }\n        called = true;\n        return (res = fn());\n    };\n};\n/** @internal */\nexport class LazyWasmModule {\n    wasmBin;\n    initOnce;\n    constructor(initFn) {\n        if (typeof initFn !== 'function') {\n            throw new Error('initFn is not a function');\n        }\n        this.initOnce = once(async () => {\n            await initFn(this.wasmBin);\n        });\n    }\n    async init(module) {\n        this.wasmBin = module;\n        await this.initOnce();\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FzbS5tanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2FzbS5tdHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0E7O0dBRUc7QUFDSCxNQUFNLElBQUksR0FBRyxDQUFnQixFQUFXLEVBQUUsRUFBRTtJQUMxQyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsSUFBSSxHQUFNLENBQUM7SUFDWCxPQUFPLEdBQUcsRUFBRTtRQUNWLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBS0YsZ0JBQWdCO0FBQ2hCLE1BQU0sT0FBTyxjQUFjO0lBQ2pCLE9BQU8sQ0FBc0I7SUFDN0IsUUFBUSxDQUFzQjtJQUV0QyxZQUFZLE1BQXdEO1FBQ2xFLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQzlCLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQTZEO1FBQ3RFLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUaGUgcmVmZXJlbmNlIG9mIGEgV2ViQXNzZW1ibHkgbW9kdWxlIHdoaWNoIGlzIGNvcGllZCBmcm9tIHRoZSB3YXNtLWJpbmRnZW5cclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcnVzdHdhc20vd2FzbS1iaW5kZ2VuL2Jsb2IvMmM2MjI3MTVjOWU2NjAyZjdiYjM3NzgyOGM3MmY3OTUzYjE3OGVkNy9jcmF0ZXMvY2xpLXN1cHBvcnQvc3JjL2pzL21vZC5ycyNMNjU2XHJcbiAqXHJcbiAqIFlvdXIgbW9zdCBjb21tb24gdXNlIGNhc2Ugd2lsbCBiZSB0byBwYXNzIGEgVVJMIHRvIGEgd2FzbSBmaWxlIGhlcmUuXHJcbiAqICsgYFdlYkFzc2VtYmx5Lk1vZHVsZWAgLSBBbiBpbnN0YW50aWF0ZWQgd2FzbSBtb2R1bGUuXHJcbiAqICsgYFVSTGAgLSBSZW1vdGUgdXJsIHRvIGEgd2FzbSBmaWxlXHJcbiAqICsgYEJ1ZmZlclNvdXJjZWAgLSBBbiBBcnJheUJ1ZmZlclZpZXcgb3IgYW4gQXJyYXlCdWZmZXJcclxuICovXHJcbmV4cG9ydCB0eXBlIFdlYkFzc2VtYmx5TW9kdWxlUmVmID0gUmVxdWVzdEluZm8gfCBVUkwgfCBSZXNwb25zZSB8IEJ1ZmZlclNvdXJjZSB8IFdlYkFzc2VtYmx5Lk1vZHVsZTtcclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IG9uY2UgPSA8VCBleHRlbmRzIGFueT4oZm46ICgpID0+IFQpID0+IHtcclxuICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgbGV0IHJlczogVDtcclxuICByZXR1cm4gKCkgPT4ge1xyXG4gICAgaWYgKGNhbGxlZCkge1xyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgIHJldHVybiAocmVzID0gZm4oKSk7XHJcbiAgfTtcclxufTtcclxuXHJcbi8qKiBAaW50ZXJuYWwgY29waWVkIGZyb20gd2FzbS1iaW5kZ2VuICovXHJcbnR5cGUgV2FzbU1vZHVsZUluaXRQYXJhbSA9IFdlYkFzc2VtYmx5TW9kdWxlUmVmIHwgUHJvbWlzZTxXZWJBc3NlbWJseU1vZHVsZVJlZj4gfCB1bmRlZmluZWQ7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBjbGFzcyBMYXp5V2FzbU1vZHVsZSB7XHJcbiAgcHJpdmF0ZSB3YXNtQmluOiBXYXNtTW9kdWxlSW5pdFBhcmFtO1xyXG4gIHByaXZhdGUgaW5pdE9uY2U6ICgpID0+IFByb21pc2U8dm9pZD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGluaXRGbjogKHBhcmFtOiBXYXNtTW9kdWxlSW5pdFBhcmFtKSA9PiBQcm9taXNlPHVua25vd24+KSB7XHJcbiAgICBpZiAodHlwZW9mIGluaXRGbiAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luaXRGbiBpcyBub3QgYSBmdW5jdGlvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaW5pdE9uY2UgPSBvbmNlKGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgaW5pdEZuKHRoaXMud2FzbUJpbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGluaXQobW9kdWxlPzogV2ViQXNzZW1ibHlNb2R1bGVSZWYgfCBQcm9taXNlPFdlYkFzc2VtYmx5TW9kdWxlUmVmPikge1xyXG4gICAgdGhpcy53YXNtQmluID0gbW9kdWxlO1xyXG4gICAgYXdhaXQgdGhpcy5pbml0T25jZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import * as idb from 'idb';\n/** @internal */\nexport const globalFontPromises = [];\nasync function addPartialFonts({ builder, hooks }) {\n    const t = performance.now();\n    if ('queryLocalFonts' in window) {\n        const fonts = await window.queryLocalFonts();\n        console.log('local fonts count:', fonts.length);\n        const db = await idb.openDB('typst-ts-store', 1, {\n            upgrade(db) {\n                db.createObjectStore('font-information', {\n                    keyPath: 'postscriptName',\n                });\n            },\n        });\n        const information = await Promise.all(fonts.map(async (font) => {\n            const postscriptName = font.postscriptName;\n            return (await db.get('font-information', postscriptName))?.info;\n        }));\n        const get_font_info = builder.handler_for_font_info();\n        await builder.add_web_fonts(fonts.map((font, font_idx) => {\n            let gettingBuffer = false;\n            let readyBuffer = undefined;\n            const fullName = font.fullName;\n            const postscriptName = font.postscriptName;\n            const prev = information[font_idx];\n            if (prev) {\n                console.log('prev', postscriptName, prev);\n            }\n            return {\n                family: font.family,\n                style: font.style,\n                fullName: fullName,\n                postscriptName: postscriptName,\n                ref: font,\n                info: information[font_idx],\n                blob: (idx) => {\n                    console.log(this, font, idx);\n                    if (readyBuffer) {\n                        return readyBuffer;\n                    }\n                    if (gettingBuffer) {\n                        return;\n                    }\n                    gettingBuffer = true;\n                    globalFontPromises.push((async () => {\n                        const blob = await font.blob();\n                        const buffer = await blob.arrayBuffer();\n                        readyBuffer = buffer;\n                        const realFontInfo = get_font_info(new Uint8Array(buffer));\n                        console.log(realFontInfo);\n                        db.put('font-information', {\n                            fullName,\n                            postscriptName,\n                            info: realFontInfo,\n                        });\n                        return { buffer, idx };\n                    })());\n                },\n            };\n        }));\n    }\n    const t2 = performance.now();\n    console.log('addPartialFonts time used:', t2 - t);\n}\nclass ComponentBuilder {\n    loadedFonts = new Set();\n    fetcher = fetch;\n    setFetcher(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async loadFonts(builder, fonts) {\n        const escapeImport = new Function('m', 'return import(m)');\n        const fetcher = (this.fetcher ||= await (async function () {\n            const { fetchBuilder, FileSystemCache } = await escapeImport('node-fetch-cache');\n            const cache = new FileSystemCache({\n                /// By default, we don't have a complicated cache policy.\n                cacheDirectory: '.cache/typst/fonts',\n            });\n            const cachedFetcher = fetchBuilder.withCache(cache);\n            return function (input, init) {\n                const timeout = setTimeout(() => {\n                    console.warn('font fetching is stucking:', input);\n                }, 15000);\n                return cachedFetcher(input, init).finally(() => {\n                    clearTimeout(timeout);\n                });\n            };\n        })());\n        const fontsToLoad = fonts.filter(font => {\n            if (font instanceof Uint8Array) {\n                return true;\n            }\n            if (this.loadedFonts.has(font)) {\n                return false;\n            }\n            this.loadedFonts.add(font);\n            return true;\n        });\n        const fontLists = await Promise.all(fontsToLoad.map(async (font) => {\n            if (font instanceof Uint8Array) {\n                await builder.add_raw_font(font);\n                return;\n            }\n            return new Uint8Array(await (await fetcher(font)).arrayBuffer());\n        }));\n        for (const font of fontLists) {\n            if (!font) {\n                continue;\n            }\n            await builder.add_raw_font(font);\n        }\n    }\n    async build(options, builder, hooks) {\n        /// build typst component\n        const buildCtx = { ref: this, builder, hooks };\n        for (const fn of options?.beforeBuild ?? []) {\n            await fn(undefined, buildCtx);\n        }\n        // await addPartialFonts(buildCtx);\n        if (hooks.latelyBuild) {\n            hooks.latelyBuild(buildCtx);\n        }\n        const component = await builder.build();\n        return component;\n    }\n}\n/** @internal */\nexport async function buildComponent(options, gModule, Builder, hooks) {\n    /// init typst wasm module\n    await gModule.init(options?.getModule?.());\n    return await new ComponentBuilder().build(options, new Builder(), hooks);\n}\n//# sourceMappingURL=data:application/json;base64,","export var PreviewMode;\n(function (PreviewMode) {\n    PreviewMode[PreviewMode[\"Doc\"] = 0] = \"Doc\";\n    PreviewMode[PreviewMode[\"Slide\"] = 1] = \"Slide\";\n})(PreviewMode = PreviewMode || (PreviewMode = {}));\nexport class TypstDocumentContext {\n    hookedElem;\n    kModule;\n    opts;\n    modes = [];\n    /// Configuration fields\n    /// enable partial rendering\n    partialRendering = true;\n    /// underlying renderer\n    renderMode = 'svg';\n    r = undefined;\n    /// preview mode\n    previewMode = PreviewMode.Doc;\n    /// whether this is a content preview\n    isContentPreview = false;\n    /// whether this content preview will mix outline titles\n    isMixinOutline = false;\n    /// background color\n    backgroundColor = 'black';\n    /// default page color (empty string means transparent)\n    pageColor = 'white';\n    /// pixel per pt\n    pixelPerPt = 3;\n    /// customized way to retrieving dom state\n    retrieveDOMState;\n    /// State fields\n    /// whether svg is updating (in triggerSvgUpdate)\n    isRendering = false;\n    /// whether kModule is initialized\n    moduleInitialized = false;\n    /// patch queue for updating data.\n    patchQueue = [];\n    /// resources to dispose\n    disposeList = [];\n    /// canvas render ctoken\n    canvasRenderCToken;\n    /// There are two scales in this class: The real scale is to adjust the size\n    /// of `hookedElem` to fit the svg. The virtual scale (scale ratio) is to let\n    /// user zoom in/out the svg. For example:\n    /// + the default value of virtual scale is 1, which means the svg is totally\n    ///   fit in `hookedElem`.\n    /// + if user set virtual scale to 0.5, then the svg will be zoomed out to fit\n    ///   in half width of `hookedElem`. \"real\" current scale of `hookedElem`\n    currentRealScale = 1;\n    /// \"virtual\" current scale of `hookedElem`\n    currentScaleRatio = 1;\n    /// timeout for delayed viewport change\n    vpTimeout = undefined;\n    /// sampled by last render time.\n    sampledRenderTime = 0;\n    /// page to partial render\n    partialRenderPage = 0;\n    /// outline data\n    outline = undefined;\n    /// cursor position in form of [page, x, y]\n    cursorPosition = undefined;\n    // id: number = rnd++;\n    /// Cache fields\n    /// cached state of container, default to retrieve state from `this.hookedElem`\n    cachedDOMState = {\n        width: 0,\n        height: 0,\n        window: {\n            innerWidth: 0,\n            innerHeight: 0,\n        },\n        boundingRect: {\n            left: 0,\n            top: 0,\n            right: 0,\n        },\n    };\n    constructor(opts) {\n        this.hookedElem = opts.hookedElem;\n        this.kModule = opts.kModule;\n        this.opts = opts || {};\n        /// Apply configuration\n        {\n            const { renderMode, previewMode, isContentPreview, retrieveDOMState } = opts || {};\n            this.partialRendering = false;\n            this.renderMode = renderMode ?? this.renderMode;\n            this.previewMode = previewMode ?? this.previewMode;\n            this.isContentPreview = isContentPreview || false;\n            this.retrieveDOMState =\n                retrieveDOMState ??\n                    (() => {\n                        return {\n                            width: this.hookedElem.offsetWidth,\n                            height: this.hookedElem.offsetHeight,\n                            window: {\n                                innerWidth: window.innerWidth,\n                                innerHeight: window.innerHeight,\n                            },\n                            boundingRect: this.hookedElem.getBoundingClientRect(),\n                        };\n                    });\n            this.backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--typst-preview-background-color');\n        }\n        // if init scale == 1\n        // hide scrollbar if scale == 1\n        this.hookedElem.classList.add('hide-scrollbar-x');\n        this.hookedElem.parentElement?.classList.add('hide-scrollbar-x');\n        if (this.previewMode === PreviewMode.Slide) {\n            this.hookedElem.classList.add('hide-scrollbar-y');\n            this.hookedElem.parentElement?.classList.add('hide-scrollbar-y');\n        }\n        this.installCtrlWheelHandler();\n    }\n    reset() {\n        this.kModule.reset();\n        this.moduleInitialized = false;\n    }\n    dispose() {\n        const disposeList = this.disposeList;\n        this.disposeList = [];\n        disposeList.forEach(x => x());\n    }\n    static derive(ctx, mode) {\n        return ['rescale', 'rerender', 'postRender'].reduce((acc, x) => {\n            acc[x] = ctx[`${x}$${mode}`].bind(ctx);\n            console.assert(acc[x] !== undefined, `${x}$${mode} is undefined`);\n            return acc;\n        }, {});\n    }\n    registerMode(mode) {\n        const facade = TypstDocumentContext.derive(this, mode);\n        this.modes.push([mode, facade]);\n        if (mode === this.renderMode) {\n            this.r = facade;\n        }\n    }\n    installCtrlWheelHandler() {\n        // Ctrl+scroll rescaling\n        // will disable auto resizing\n        // fixed factors, same as pdf.js\n        const factors = [\n            0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.4, 2.7, 3,\n            3.3, 3.7, 4.1, 4.6, 5.1, 5.7, 6.3, 7, 7.7, 8.5, 9.4, 10,\n        ];\n        const wheelEventHandler = (event) => {\n            if (event.ctrlKey) {\n                event.preventDefault();\n                // retrieve dom state before any operation\n                this.cachedDOMState = this.retrieveDOMState();\n                if (window.onresize !== null) {\n                    // is auto resizing\n                    window.onresize = null;\n                }\n                const prevScaleRatio = this.currentScaleRatio;\n                // Get wheel scroll direction and calculate new scale\n                if (event.deltaY < 0) {\n                    // enlarge\n                    if (this.currentScaleRatio >= factors.at(-1)) {\n                        // already large than max factor\n                        return;\n                    }\n                    else {\n                        this.currentScaleRatio = factors.filter(x => x > this.currentScaleRatio).at(0);\n                    }\n                }\n                else if (event.deltaY > 0) {\n                    // reduce\n                    if (this.currentScaleRatio <= factors.at(0)) {\n                        return;\n                    }\n                    else {\n                        this.currentScaleRatio = factors.filter(x => x < this.currentScaleRatio).at(-1);\n                    }\n                }\n                else {\n                    // no y-axis scroll\n                    return;\n                }\n                const scrollFactor = this.currentScaleRatio / prevScaleRatio;\n                const scrollX = event.pageX * (scrollFactor - 1);\n                const scrollY = event.pageY * (scrollFactor - 1);\n                // hide scrollbar if scale == 1\n                if (Math.abs(this.currentScaleRatio - 1) < 1e-5) {\n                    this.hookedElem.classList.add('hide-scrollbar-x');\n                    this.hookedElem.parentElement?.classList.add('hide-scrollbar-x');\n                    if (this.previewMode === PreviewMode.Slide) {\n                        this.hookedElem.classList.add('hide-scrollbar-y');\n                        this.hookedElem.parentElement?.classList.add('hide-scrollbar-y');\n                    }\n                }\n                else {\n                    this.hookedElem.classList.remove('hide-scrollbar-x');\n                    this.hookedElem.parentElement?.classList.remove('hide-scrollbar-x');\n                    if (this.previewMode === PreviewMode.Slide) {\n                        this.hookedElem.classList.remove('hide-scrollbar-y');\n                        this.hookedElem.parentElement?.classList.remove('hide-scrollbar-y');\n                    }\n                }\n                // reserve space to scroll down\n                const svg = this.hookedElem.firstElementChild;\n                if (svg) {\n                    const scaleRatio = this.getSvgScaleRatio();\n                    const dataHeight = Number.parseFloat(svg.getAttribute('data-height'));\n                    const scaledHeight = Math.ceil(dataHeight * scaleRatio);\n                    // we increase the height by 2 times.\n                    // The `2` is only a magic number that is large enough.\n                    this.hookedElem.style.height = `${scaledHeight * 2}px`;\n                }\n                // make sure the cursor is still on the same position\n                window.scrollBy(scrollX, scrollY);\n                // toggle scale change event\n                this.addViewportChange();\n                return false;\n            }\n        };\n        if (this.renderMode !== 'dom') {\n            const vscodeAPI = typeof acquireVsCodeApi !== 'undefined';\n            if (vscodeAPI) {\n                window.addEventListener('wheel', wheelEventHandler, {\n                    passive: false,\n                });\n                this.disposeList.push(() => {\n                    window.removeEventListener('wheel', wheelEventHandler);\n                });\n            }\n            else {\n                document.body.addEventListener('wheel', wheelEventHandler, {\n                    passive: false,\n                });\n                this.disposeList.push(() => {\n                    document.body.removeEventListener('wheel', wheelEventHandler);\n                });\n            }\n        }\n    }\n    /// Get current scale from html to svg\n    // Note: one should retrieve dom state before rescale\n    getSvgScaleRatio() {\n        const svg = this.hookedElem.firstElementChild;\n        if (!svg) {\n            return 0;\n        }\n        const container = this.cachedDOMState;\n        const svgWidth = Number.parseFloat(svg.getAttribute('data-width') || svg.getAttribute('width') || '1');\n        const svgHeight = Number.parseFloat(svg.getAttribute('data-height') || svg.getAttribute('height') || '1');\n        this.currentRealScale =\n            this.previewMode === PreviewMode.Slide\n                ? Math.min(container.width / svgWidth, container.height / svgHeight)\n                : container.width / svgWidth;\n        return this.currentRealScale * this.currentScaleRatio;\n    }\n    processQueue(svgUpdateEvent) {\n        const eventName = svgUpdateEvent[0];\n        switch (eventName) {\n            case 'new':\n            case 'diff-v1': {\n                if (eventName === 'new') {\n                    this.reset();\n                }\n                this.kModule.manipulateData({\n                    action: 'merge',\n                    data: svgUpdateEvent[1],\n                });\n                this.moduleInitialized = true;\n                return true;\n            }\n            case 'viewport-change': {\n                if (!this.moduleInitialized) {\n                    console.log('viewport-change before initialization');\n                    return false;\n                }\n                return true;\n            }\n            default:\n                console.log('svgUpdateEvent', svgUpdateEvent);\n                return false;\n        }\n    }\n    triggerUpdate() {\n        if (this.isRendering) {\n            return;\n        }\n        this.isRendering = true;\n        const doUpdate = async () => {\n            this.cachedDOMState = this.retrieveDOMState();\n            if (this.patchQueue.length === 0) {\n                this.isRendering = false;\n                this.postprocessChanges();\n                return;\n            }\n            try {\n                let t0 = performance.now();\n                const ctoken = this.canvasRenderCToken;\n                if (ctoken) {\n                    await ctoken.cancel();\n                    await ctoken.wait();\n                    this.canvasRenderCToken = undefined;\n                    console.log('cancel canvas rendering');\n                }\n                let needRerender = false;\n                // console.log('patchQueue', JSON.stringify(this.patchQueue.map(x => x[0])));\n                while (this.patchQueue.length > 0) {\n                    needRerender = this.processQueue(this.patchQueue.shift()) || needRerender;\n                }\n                // todo: trigger viewport change once\n                let t1 = performance.now();\n                if (needRerender) {\n                    this.r.rescale();\n                    await this.r.rerender();\n                    this.r.rescale();\n                }\n                let t2 = performance.now();\n                /// perf event\n                const d = (e, x, y) => `${e} ${(y - x).toFixed(2)} ms`;\n                this.sampledRenderTime = t2 - t0;\n                console.log([d('parse', t0, t1), d('rerender', t1, t2), d('total', t0, t2)].join(', '));\n                requestAnimationFrame(doUpdate);\n            }\n            catch (e) {\n                console.error(e);\n                this.isRendering = false;\n                this.postprocessChanges();\n            }\n        };\n        requestAnimationFrame(doUpdate);\n    }\n    postprocessChanges() {\n        this.r.postRender();\n        // todo: abstract this\n        if (this.previewMode === PreviewMode.Slide) {\n            document.querySelectorAll('.typst-page-number-indicator').forEach(x => {\n                x.textContent = `${this.kModule.retrievePagesInfo().length}`;\n            });\n        }\n    }\n    addChangement(change) {\n        if (change[0] === 'new') {\n            this.patchQueue.splice(0, this.patchQueue.length);\n        }\n        const pushChange = () => {\n            this.vpTimeout = undefined;\n            this.patchQueue.push(change);\n            this.triggerUpdate();\n        };\n        if (this.vpTimeout !== undefined) {\n            clearTimeout(this.vpTimeout);\n        }\n        if (change[0] === 'viewport-change' && this.isRendering) {\n            // delay viewport change a bit\n            this.vpTimeout = setTimeout(pushChange, this.sampledRenderTime || 100);\n        }\n        else {\n            pushChange();\n        }\n    }\n    addViewportChange() {\n        this.addChangement(['viewport-change', '']);\n    }\n}\nexport function provideDoc(Base) {\n    return class TypstDocument {\n        impl;\n        kModule;\n        constructor(options) {\n            if (options.isContentPreview) {\n                options.renderMode = 'canvas';\n            }\n            this.kModule = options.kModule;\n            this.impl = new Base(options);\n            if (!this.impl.r) {\n                throw new Error(`mode is not supported, ${options?.renderMode}`);\n            }\n            if (options.isContentPreview) {\n                // content preview has very bad performance without partial rendering\n                this.impl.partialRendering = true;\n                this.impl.pixelPerPt = 1;\n                this.impl.isMixinOutline = true;\n            }\n        }\n        dispose() {\n            this.impl.dispose();\n        }\n        reset() {\n            this.impl.reset();\n        }\n        addChangement(change) {\n            this.impl.addChangement(change);\n        }\n        addViewportChange() {\n            this.impl.addViewportChange();\n        }\n        setPageColor(color) {\n            this.impl.pageColor = color;\n            this.addViewportChange();\n        }\n        setPartialRendering(partialRendering) {\n            this.impl.partialRendering = partialRendering;\n        }\n        setCursor(page, x, y) {\n            this.impl.cursorPosition = [page, x, y];\n        }\n        setPartialPageNumber(page) {\n            if (page <= 0 || page > this.kModule.retrievePagesInfo().length) {\n                return false;\n            }\n            this.impl.partialRenderPage = page - 1;\n            this.addViewportChange();\n            return true;\n        }\n        getPartialPageNumber() {\n            return this.impl.partialRenderPage + 1;\n        }\n        setOutineData(outline) {\n            this.impl.outline = outline;\n            this.addViewportChange();\n        }\n    };\n}\nexport function composeDoc(Base, ...mixins) {\n    return mixins.reduce((acc, mixin) => mixin(acc), Base);\n}\n//# sourceMappingURL=data:application/json;base64,","export class TypstCancellationToken {\n    isCancellationRequested = false;\n    _onCancelled;\n    _onCancelledResolveResolved;\n    constructor() {\n        let resolveT = undefined;\n        let resolveX = undefined;\n        this._onCancelled = new Promise(resolve => {\n            resolveT = resolve;\n            if (resolveX) {\n                resolveX(resolve);\n            }\n        });\n        this._onCancelledResolveResolved = new Promise(resolve => {\n            resolveX = resolve;\n            if (resolveT) {\n                resolve(resolveT);\n            }\n        });\n    }\n    async cancel() {\n        await this._onCancelledResolveResolved;\n        this.isCancellationRequested = true;\n    }\n    isCancelRequested() {\n        return this.isCancellationRequested;\n    }\n    async consume() {\n        (await this._onCancelledResolveResolved)();\n    }\n    wait() {\n        return this._onCancelled;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwc3QtY2FuY2VsLm1qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb250cmliL2RvbS90eXBzdC1jYW5jZWwubXRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxzQkFBc0I7SUFDakMsdUJBQXVCLEdBQVksS0FBSyxDQUFDO0lBQ2pDLFlBQVksQ0FBZ0I7SUFDNUIsMkJBQTJCLENBQXNCO0lBRXpEO1FBQ0UsSUFBSSxRQUFRLEdBQWUsU0FBVSxDQUFDO1FBQ3RDLElBQUksUUFBUSxHQUE0QixTQUFVLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN4QyxRQUFRLEdBQUcsT0FBTyxDQUFDO1lBQ25CLElBQUksUUFBUSxFQUFFO2dCQUNaLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNuQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3ZELFFBQVEsR0FBRyxPQUFPLENBQUM7WUFDbkIsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ25CO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU07UUFDVixNQUFNLElBQUksQ0FBQywyQkFBMkIsQ0FBQztRQUN2QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztJQUN0QyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU87UUFDWCxDQUFDLE1BQU0sSUFBSSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVHlwc3RDYW5jZWxsYXRpb25Ub2tlbiB7XHJcbiAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBwcml2YXRlIF9vbkNhbmNlbGxlZDogUHJvbWlzZTx2b2lkPjtcclxuICBwcml2YXRlIF9vbkNhbmNlbGxlZFJlc29sdmVSZXNvbHZlZDogUHJvbWlzZTwoKSA9PiB2b2lkPjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBsZXQgcmVzb2x2ZVQ6ICgpID0+IHZvaWQgPSB1bmRlZmluZWQhO1xyXG4gICAgbGV0IHJlc29sdmVYOiAoXzogKCkgPT4gdm9pZCkgPT4gdm9pZCA9IHVuZGVmaW5lZCE7XHJcbiAgICB0aGlzLl9vbkNhbmNlbGxlZCA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICByZXNvbHZlVCA9IHJlc29sdmU7XHJcbiAgICAgIGlmIChyZXNvbHZlWCkge1xyXG4gICAgICAgIHJlc29sdmVYKHJlc29sdmUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX29uQ2FuY2VsbGVkUmVzb2x2ZVJlc29sdmVkID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgIHJlc29sdmVYID0gcmVzb2x2ZTtcclxuICAgICAgaWYgKHJlc29sdmVUKSB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXNvbHZlVCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY2FuY2VsKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5fb25DYW5jZWxsZWRSZXNvbHZlUmVzb2x2ZWQ7XHJcbiAgICB0aGlzLmlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGlzQ2FuY2VsUmVxdWVzdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ7XHJcbiAgfVxyXG5cclxuICBhc3luYyBjb25zdW1lKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgKGF3YWl0IHRoaXMuX29uQ2FuY2VsbGVkUmVzb2x2ZVJlc29sdmVkKSgpO1xyXG4gIH1cclxuXHJcbiAgd2FpdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLl9vbkNhbmNlbGxlZDtcclxuICB9XHJcbn1cclxuIl19","import { kObject } from './internal.types.mjs';\nimport { TypstDocumentContext, composeDoc, provideDoc, } from './contrib/dom/typst-doc.mjs';\nimport { TypstCancellationToken } from './contrib/dom/typst-cancel.mjs';\nconst animationFrame = () => new Promise(resolve => requestAnimationFrame(resolve));\nclass DomPage {\n    dispose() { }\n}\nvar TrackMode;\n(function (TrackMode) {\n    TrackMode[TrackMode[\"Doc\"] = 0] = \"Doc\";\n    TrackMode[TrackMode[\"Pages\"] = 1] = \"Pages\";\n})(TrackMode || (TrackMode = {}));\nvar RepaintStage;\n(function (RepaintStage) {\n    RepaintStage[RepaintStage[\"Layout\"] = 0] = \"Layout\";\n    RepaintStage[RepaintStage[\"Svg\"] = 1] = \"Svg\";\n    RepaintStage[RepaintStage[\"Semantics\"] = 2] = \"Semantics\";\n    RepaintStage[RepaintStage[\"PrepareCanvas\"] = 3] = \"PrepareCanvas\";\n    RepaintStage[RepaintStage[\"Canvas\"] = 4] = \"Canvas\";\n})(RepaintStage || (RepaintStage = {}));\nexport function provideDomDoc(Base) {\n    return class DomDocument extends Base {\n        /// The template element for creating DOM by string.\n        tmpl = document.createElement('template');\n        /// The stub element for replacing an invisible element.\n        stub = this.createElement('<stub></stub>');\n        /// Typescript side of lib.\n        plugin;\n        /// Rust side of kernel.\n        docKernel;\n        /// The element to track.\n        resourceHeader = undefined;\n        /// Expected exact state of the current DOM.\n        /// Initially it is empty meaning no any page is rendered.\n        pages = [];\n        /// The virtual scale of the document.\n        domScale = 1;\n        /// Track mode.\n        track_mode = TrackMode.Doc;\n        /// Current executing task.\n        current_task = undefined;\n        /// The currently maintained viewport.\n        viewport;\n        constructor(...args) {\n            super(...args);\n            this.registerMode('dom');\n            this.disposeList.push(() => {\n                this.dispose();\n            });\n            this.plugin = this.opts.renderer;\n            if (this.opts.domScale !== undefined) {\n                if (this.opts.domScale <= 0) {\n                    throw new Error('domScale must be positive');\n                }\n                this.domScale = this.opts.domScale;\n            }\n        }\n        dispose() {\n            for (const page of this.pages) {\n                page.dispose();\n            }\n            if (this.docKernel) {\n                this.docKernel.free();\n            }\n        }\n        createElement(tmpl) {\n            this.tmpl.innerHTML = tmpl;\n            return this.tmpl.content.firstElementChild;\n        }\n        async mountDom(pixelPerPt) {\n            console.log('mountDom', pixelPerPt);\n            if (this.docKernel) {\n                throw new Error('already mounted');\n            }\n            // create typst-svg-resources by string\n            this.hookedElem.innerHTML = `<svg class=\"typst-svg-resources\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" style=\"opacity: 0; position: absolute;\"></svg>`;\n            this.resourceHeader = this.hookedElem.querySelector('.typst-svg-resources');\n            this.docKernel = await this.plugin.renderer.mount_dom(this.kModule[kObject], this.hookedElem);\n            this.docKernel.bind_functions({\n                populateGlyphs: (data) => {\n                    let svg = this.createElement(data);\n                    console.log('populateGlyphs', svg);\n                    let content = svg.firstElementChild;\n                    this.resourceHeader.append(content);\n                },\n            });\n        }\n        async cancelAnyway$dom() {\n            console.log('cancelAnyway$dom');\n            if (this.current_task) {\n                const task = this.current_task;\n                this.current_task = undefined;\n                await task.cancel();\n            }\n        }\n        retrieveDOMPages() {\n            return Array.from(this.hookedElem.querySelectorAll('.typst-dom-page'));\n        }\n        // doesn't need to postRender\n        postRender$dom() { }\n        // doesn't need to rescale\n        rescale$dom() { }\n        getDomViewport(cachedWindow, cachedBoundingRect) {\n            const left = cachedBoundingRect.left;\n            const top = -cachedBoundingRect.top;\n            const right = cachedBoundingRect.right;\n            const bottom = cachedWindow.innerHeight - cachedBoundingRect.top;\n            const rect = {\n                x: 0,\n                y: top / this.domScale,\n                width: Math.max(right - left, 0) / this.domScale,\n                height: Math.max(bottom - top, 0) / this.domScale,\n            };\n            if (rect.width <= 0 || rect.height <= 0) {\n                rect.x = rect.y = rect.width = rect.height = 0;\n            }\n            // console.log('ccc', basePos, appPos, rect);\n            return rect;\n        }\n        // fast mode\n        async rerender$dom() {\n            const domState = this.retrieveDOMState();\n            // const l = domState.boundingRect.left;\n            const { x, y, width, height } = this.getDomViewport(domState.window, domState.boundingRect);\n            let dirty = await this.docKernel.relayout(x, y, width, height);\n            if (!dirty) {\n                return;\n            }\n            const cancel = new TypstCancellationToken();\n            this.doRender$dom(cancel);\n            this.current_task = cancel;\n        }\n        async doRender$dom(ctx) {\n            const condOrExit = (needFrame, cb) => {\n                if (needFrame && !ctx.isCancelRequested() && cb) {\n                    return cb();\n                }\n            };\n            const pages = this.retrieveDOMPages().map(page => {\n                const { innerWidth, innerHeight } = window;\n                const browserBBox = page.getBoundingClientRect();\n                // any part of the page is in the window\n                return {\n                    inWindow: !(browserBBox.left > innerWidth ||\n                        browserBBox.right < 0 ||\n                        browserBBox.top > innerHeight ||\n                        browserBBox.bottom < 0),\n                    page,\n                };\n            });\n            const renderPage = async (i) => {\n                await animationFrame();\n                if (ctx.isCancelRequested()) {\n                    console.log('cancel stage', RepaintStage.Layout, i);\n                    return undefined;\n                }\n                const page = pages[i].page;\n                const browserBBox = page.getBoundingClientRect();\n                const v = this.getDomViewport(window, browserBBox);\n                const needCalc = (stage) => this.docKernel.need_repaint(i, v.x, v.y, v.width, v.height, stage);\n                const repaint = (stage) => this.docKernel.repaint(i, v.x, v.y, v.width, v.height, stage);\n                const calc = (stage) => {\n                    if (ctx.isCancelRequested()) {\n                        return undefined;\n                    }\n                    return condOrExit(needCalc(stage), () => repaint(stage));\n                };\n                await calc(RepaintStage.Layout);\n                const wScale = (browserBBox.width\n                    ? Number.parseFloat(page.getAttribute('data-width')) / browserBBox.width\n                    : 1) * this.domScale;\n                const hScale = (browserBBox.height\n                    ? Number.parseFloat(page.getAttribute('data-height')) / browserBBox.height\n                    : 1) * this.domScale;\n                v.x *= wScale;\n                v.y *= hScale;\n                v.y -= 100;\n                v.width *= wScale;\n                v.height *= hScale;\n                v.height += 200;\n                await calc(RepaintStage.Svg);\n                await calc(RepaintStage.Semantics);\n                if (ctx.isCancelRequested()) {\n                    console.log('cancel stage', RepaintStage.Semantics, i);\n                    return undefined;\n                }\n                if (needCalc(RepaintStage.PrepareCanvas)) {\n                    const calcCanvasAfterPreparing = async () => {\n                        await repaint(RepaintStage.PrepareCanvas);\n                        if (ctx.isCancelRequested()) {\n                            return undefined;\n                        }\n                        return calc(RepaintStage.Canvas);\n                    };\n                    calcCanvasAfterPreparing();\n                }\n                else {\n                    await calc(RepaintStage.Canvas);\n                }\n            };\n            const renderPages = async (inWindow) => {\n                for (let idx = 0; idx < pages.length; ++idx) {\n                    if (ctx.isCancelRequested()) {\n                        console.log('cancel page', RepaintStage.Layout, idx);\n                        return;\n                    }\n                    if (pages[idx].inWindow === inWindow) {\n                        await renderPage(idx);\n                    }\n                }\n            };\n            this.cancelAnyway$dom();\n            await renderPages(true);\n            await renderPages(false);\n            if (ctx.isCancelRequested()) {\n                return;\n            }\n            console.log('finished', RepaintStage.Layout);\n        }\n    };\n}\nexport class TypstDomDocument extends provideDoc(composeDoc(TypstDocumentContext, provideDomDoc)) {\n}\n//# sourceMappingURL=data:application/json;base64,","import { TypstDefaultParams, kObject } from './internal.types.mjs';\nimport { RenderView } from './render/canvas/view.mjs';\nimport { LazyWasmModule } from './wasm.mjs';\nimport { buildComponent } from './init.mjs';\nimport { TypstDomDocument } from './dom.mjs';\n/**\n * The session of a Typst document.\n * @property {string} backgroundColor - The background color of the Typst\n * document.\n * @property {number} pixelPerPt - The pixel per point scale up the image.\n *\n */\nexport class RenderSession {\n    plugin;\n    /**\n     * @internal\n     */\n    [kObject];\n    /**\n     * @internal\n     */\n    constructor(\n    /**\n     * @internal\n     */\n    plugin, o) {\n        this.plugin = plugin;\n        this[kObject] = o;\n    }\n    /**\n     * @deprecated set in {@link RenderToCanvasOptions} instead\n     *\n     * Set the background color of the Typst document.\n     * @param {string} t - The background color in format of `^#?[0-9a-f]{6}$`\n     *\n     * Note: Default to `#ffffff`.\n     *\n     * Note: Only available in canvas rendering mode.\n     */\n    set backgroundColor(t) {\n        if (t !== undefined) {\n            this[kObject].background_color = t;\n        }\n    }\n    /**\n     * Get the background color of the Typst document.\n     *\n     * Note: Default to `#ffffff`.\n     *\n     * Note: Only available in canvas rendering mode.\n     */\n    get backgroundColor() {\n        return this[kObject].background_color;\n    }\n    /**\n     * Set the pixel per point scale up the canvas panel.\n     *\n     * Note: Default to `3`.\n     *\n     * Note: Only available in canvas rendering mode.\n     */\n    set pixelPerPt(t) {\n        if (t !== undefined) {\n            this[kObject].pixel_per_pt = t;\n        }\n    }\n    /**\n     * @deprecated set in {@link RenderToCanvasOptions} instead\n     *\n     * Get the pixel per point scale up the canvas panel.\n     *\n     * Note: Default to `3`.\n     *\n     * Note: Only available in canvas rendering mode.\n     */\n    get pixelPerPt() {\n        return this[kObject].pixel_per_pt;\n    }\n    /**\n     * Reset state\n     */\n    reset() {\n        this.plugin.resetSession(this);\n    }\n    /**\n     * @deprecated\n     * use {@link docWidth} instead\n     */\n    get doc_width() {\n        return this[kObject].doc_width;\n    }\n    get docWidth() {\n        return this[kObject].doc_width;\n    }\n    /**\n     * @deprecated\n     * use {@link docHeight} instead\n     */\n    get doc_height() {\n        return this[kObject].doc_height;\n    }\n    get docHeight() {\n        return this[kObject].doc_height;\n    }\n    retrievePagesInfo() {\n        const pages_info = this[kObject].pages_info;\n        const pageInfos = [];\n        const pageCount = pages_info.page_count;\n        for (let i = 0; i < pageCount; i++) {\n            const pageAst = pages_info.page(i);\n            pageInfos.push({\n                pageOffset: pageAst.page_off,\n                width: pageAst.width_pt,\n                height: pageAst.height_pt,\n            });\n        }\n        return pageInfos;\n    }\n    getSourceLoc(path) {\n        return this[kObject].source_span(path);\n    }\n    /**\n     * See {@link TypstRenderer#renderSvg} for more details.\n     */\n    renderSvg(options) {\n        return this.plugin.renderSvg({\n            renderSession: this,\n            ...options,\n        });\n    }\n    /**\n     * See {@link TypstRenderer#renderToSvg} for more details.\n     */\n    renderToSvg(options) {\n        return this.plugin.renderToSvg({\n            renderSession: this,\n            ...options,\n        });\n    }\n    /**\n     * See {@link TypstRenderer#renderCanvas} for more details.\n     */\n    renderCanvas(options) {\n        return this.plugin.renderCanvas({\n            renderSession: this,\n            ...options,\n        });\n    }\n    /**\n     * See {@link TypstRenderer#manipulateData} for more details.\n     */\n    manipulateData(opts) {\n        this.plugin.manipulateData({\n            renderSession: this,\n            ...opts,\n        });\n    }\n    /**\n     * See {@link TypstRenderer#renderSvgDiff} for more details.\n     */\n    renderSvgDiff(opts) {\n        return this.plugin.renderSvgDiff({\n            renderSession: this,\n            ...opts,\n        });\n    }\n    /**\n     * @deprecated\n     * use {@link getSourceLoc} instead\n     */\n    get_source_loc(path) {\n        return this[kObject].source_span(path);\n    }\n    /**\n     * @deprecated\n     * use {@link renderSvgDiff} instead\n     */\n    render_in_window(rect_lo_x, rect_lo_y, rect_hi_x, rect_hi_y) {\n        return this[kObject].render_in_window(rect_lo_x, rect_lo_y, rect_hi_x, rect_hi_y);\n    }\n    /**\n     * @deprecated\n     * use {@link manipulateData} instead\n     */\n    merge_delta(data) {\n        this.plugin.manipulateData({\n            renderSession: this,\n            action: 'merge',\n            data,\n        });\n    }\n}\n/**\n * @internal\n */\nvar ManageStatus;\n(function (ManageStatus) {\n    ManageStatus[ManageStatus[\"Delete\"] = 0] = \"Delete\";\n    ManageStatus[ManageStatus[\"New\"] = 1] = \"New\";\n    ManageStatus[ManageStatus[\"Update\"] = 2] = \"Update\";\n})(ManageStatus || (ManageStatus = {}));\nexport class TypstWorker {\n    plugin;\n    /**\n     * @internal\n     */\n    [kObject];\n    /**\n     * @internal\n     */\n    constructor(\n    /**\n     * @internal\n     */\n    plugin, o) {\n        this.plugin = plugin;\n        this[kObject] = o;\n    }\n    /**\n     * See {@link TypstRenderer#manipulateData} for more details.\n     */\n    manipulateData(action, data) {\n        return this[kObject].manipulate_data(action, data);\n    }\n    /**\n     * @internal\n     */\n    managedCanvasElemList = new Map();\n    /**\n     * @internal\n     */\n    canvasCounter = Math.random();\n    /**\n     * You must submit all canvas in pages to ensure synchronization with the background worker\n     *\n     * See {@link TypstRenderer#renderCanvas} for more details.\n     */\n    renderCanvas(canvasElemList) {\n        const m = this.managedCanvasElemList;\n        for (const [_, elem] of m) {\n            elem[0] = ManageStatus.Delete;\n        }\n        for (const elem of canvasElemList) {\n            const canvas = elem.canvas;\n            let elemId = canvas.dataset.manageId;\n            let action = ManageStatus.Update;\n            if (!elemId) {\n                elemId = this.canvasCounter.toFixed(5);\n                this.canvasCounter += 1;\n                canvas.dataset.manageId = elemId;\n                action = ManageStatus.New;\n            }\n            let prev = m.get(elemId);\n            if (prev && prev[0] !== ManageStatus.Delete) {\n                throw new Error('cannot update a canvas for two times in batch');\n            }\n            m.set(elemId, [action, { ...elem }]);\n        }\n        const entries = Array.from(m.entries());\n        const actions = new Uint8Array(entries.length);\n        const elements = new Array(entries.length);\n        const options = entries.map(([key, [action, elem]], index) => {\n            if (!action) {\n                m.delete(key);\n            }\n            actions[index] = action;\n            elements[index] = elem.canvas;\n            return this.plugin.canvasOptionsToRust(elem);\n        });\n        return this[kObject].render_canvas(actions, elements, options);\n    }\n    async retrievePagesInfo() {\n        const pages_info = await this[kObject].get_pages_info();\n        console.log(pages_info);\n        const pageInfos = [];\n        const pageCount = pages_info.page_count;\n        for (let i = 0; i < pageCount; i++) {\n            const pageAst = pages_info.page(i);\n            pageInfos.push({\n                pageOffset: pageAst.page_off,\n                width: pageAst.width_pt,\n                height: pageAst.height_pt,\n            });\n        }\n        return pageInfos;\n    }\n}\nconst gRendererModule = (module) => new LazyWasmModule(async (bin) => {\n    return await module.default(bin);\n});\n/**\n * create a Typst renderer.\n * @returns {TypstRenderer} - The Typst renderer.\n * @example\n * ```typescript\n * import { createTypstRenderer } from 'typst';\n * const renderer = createTypstRenderer();\n * await renderer.init();\n * await renderer.render({\n *   container: document.getElementById('container'),\n *   artifactContent: '{ ... }',\n * });\n * ```\n */\nexport function createTypstRenderer() {\n    return new TypstRendererDriver();\n}\n/**\n * @deprecated\n * use {@link createTypstRenderer} instead\n */\nexport function createTypstSvgRenderer() {\n    return new TypstRendererDriver();\n}\nexport async function rendererBuildInfo() {\n    const renderModule = await import('@myriaddreamin/typst-ts-renderer/pkg/wasm-pack-shim.mjs');\n    return renderModule.renderer_build_info();\n}\nlet warnOnceCanvasSet = true;\n/** @internal */\nexport class TypstRendererDriver {\n    renderer;\n    rendererJs;\n    constructor() { }\n    async init(options) {\n        this.rendererJs = await (options?.getWrapper?.() ||\n            import('@myriaddreamin/typst-ts-renderer/pkg/wasm-pack-shim.mjs'));\n        const TypstRendererBuilder = this.rendererJs.TypstRendererBuilder;\n        this.renderer = await buildComponent(options, gRendererModule(this.rendererJs), TypstRendererBuilder, {});\n    }\n    loadGlyphPack(_pack) {\n        // this.renderer.load_glyph_pack(pack);\n        return Promise.resolve();\n    }\n    createOptionsToRust(options) {\n        const rustOptions = new this.rendererJs.CreateSessionOptions();\n        if (options.format !== undefined) {\n            rustOptions.format = options.format;\n        }\n        if (options.artifactContent !== undefined) {\n            rustOptions.artifact_content = options.artifactContent;\n        }\n        return rustOptions;\n    }\n    canvasOptionsToRust(options) {\n        const rustOptions = new this.rendererJs.RenderPageImageOptions();\n        if (options.pageOffset === undefined) {\n            throw new Error('pageOffset is required in reflexo v0.5.0');\n        }\n        else {\n            rustOptions.page_off = options.pageOffset;\n        }\n        if (options.cacheKey !== undefined) {\n            rustOptions.cache_key = options.cacheKey;\n        }\n        if (options.backgroundColor !== undefined) {\n            rustOptions.background_color = options.backgroundColor;\n        }\n        if (options.pixelPerPt !== undefined) {\n            rustOptions.pixel_per_pt = options.pixelPerPt;\n        }\n        if (options.dataSelection !== undefined) {\n            let encoded = 0;\n            if (options.dataSelection.body) {\n                encoded |= 1 << 0;\n            }\n            else if (options.canvas && warnOnceCanvasSet) {\n                warnOnceCanvasSet = false;\n                console.warn('dataSelection.body is not set but providing canvas for body');\n            }\n            if (options.dataSelection.text || options.dataSelection.annotation) {\n                console.error('dataSelection.text and dataSelection.annotation are deprecated');\n            }\n            if (options.dataSelection.semantics) {\n                encoded |= 1 << 3;\n            }\n            rustOptions.data_selection = encoded;\n        }\n        return rustOptions;\n    }\n    retrievePagesInfoFromSession(session) {\n        return session.retrievePagesInfo();\n    }\n    /**\n     * Render a Typst document to canvas.\n     */\n    renderCanvas(options) {\n        return this.withinOptionSession(options, async (sessionRef) => {\n            return this.renderer.render_page_to_canvas(sessionRef[kObject], options.canvas || undefined, this.canvasOptionsToRust(options));\n        });\n    }\n    // async renderPdf(artifactContent: string): Promise<Uint8Array> {\n    // return this.renderer.render_to_pdf(artifactContent);\n    // }\n    async inAnimationFrame(fn) {\n        return new Promise((resolve, reject) => {\n            requestAnimationFrame(() => {\n                try {\n                    resolve(fn());\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async renderDisplayLayer(session, canvasList, options) {\n        const pages_info = session[kObject].pages_info;\n        const page_count = pages_info.page_count;\n        const doRender = async (i, page_off) => {\n            const canvas = canvasList[i];\n            const ctx = canvas.getContext('2d');\n            if (!ctx) {\n                throw new Error('canvas context is null');\n            }\n            return await this.renderCanvas({\n                ...options,\n                canvas: ctx,\n                renderSession: session,\n                pageOffset: page_off,\n            });\n        };\n        const t = performance.now();\n        const textContentList = await (async () => {\n            const results = [];\n            for (let i = 0; i < page_count; i++) {\n                results.push(await this.inAnimationFrame(() => doRender(i, i)));\n            }\n            return results;\n        })();\n        const t2 = performance.now();\n        console.log(`display layer used: render = ${(t2 - t).toFixed(1)}ms`);\n        return textContentList;\n    }\n    renderTextLayer(layerList, textSourceList) {\n        const t2 = performance.now();\n        layerList.forEach((layer, i) => {\n            layer.innerHTML = textSourceList[i].htmlSemantics[0];\n        });\n        const t3 = performance.now();\n        console.log(`text layer used: render = ${(t3 - t2).toFixed(1)}ms`);\n    }\n    async render(options) {\n        if ('format' in options) {\n            if (options.format !== 'vector') {\n                const artifactFormats = ['serde_json', 'js', 'ir'];\n                if (artifactFormats.includes(options.format)) {\n                    // deprecated\n                    throw new Error(`deprecated format ${options.format}, please use vector format`);\n                }\n            }\n        }\n        return this.renderToCanvas(options);\n    }\n    async renderDom(options) {\n        if ('format' in options) {\n            if (options.format !== 'vector') {\n                const artifactFormats = ['serde_json', 'js', 'ir'];\n                if (artifactFormats.includes(options.format)) {\n                    // deprecated\n                    throw new Error(`deprecated format ${options.format}, please use vector format`);\n                }\n            }\n        }\n        return this.withinOptionSession(options, async (sessionRef) => {\n            const t = new TypstDomDocument({\n                ...options,\n                renderMode: 'dom',\n                hookedElem: options.container,\n                kModule: sessionRef,\n                renderer: this,\n            });\n            t;\n            await t.impl.mountDom(options.pixelPerPt);\n            return t;\n        });\n    }\n    async renderToCanvas(options) {\n        let session;\n        let renderPageResults;\n        const mountContainer = options.container;\n        mountContainer.style.visibility = 'hidden';\n        const doRenderDisplayLayer = async (canvasList, resetLayout) => {\n            try {\n                renderPageResults = await this.renderDisplayLayer(session, canvasList, options);\n                resetLayout();\n            }\n            finally {\n                mountContainer.style.visibility = 'visible';\n            }\n        };\n        return this.withinOptionSession(options, async (sessionRef) => {\n            session = sessionRef;\n            if (session[kObject].pages_info.page_count === 0) {\n                throw new Error(`No page found in session`);\n            }\n            if (options.pixelPerPt !== undefined && options.pixelPerPt <= 0) {\n                throw new Error('Invalid typst.RenderOptions.pixelPerPt, should be a positive number ' +\n                    options.pixelPerPt);\n            }\n            let backgroundColor = options.backgroundColor;\n            if (backgroundColor !== undefined) {\n                if (!/^#[0-9a-f]{6}$/.test(backgroundColor)) {\n                    throw new Error('Invalid typst.backgroundColor color for matching ^#?[0-9a-f]{6}$ ' + backgroundColor);\n                }\n            }\n            session.pixelPerPt = options.pixelPerPt ?? TypstDefaultParams.PIXEL_PER_PT;\n            session.backgroundColor = backgroundColor ?? '#ffffff';\n            const t = performance.now();\n            const pageView = new RenderView(this.retrievePagesInfoFromSession(session), mountContainer, options);\n            const t2 = performance.now();\n            console.log(`layer used: retrieve = ${(t2 - t).toFixed(1)}ms`);\n            await doRenderDisplayLayer(pageView.canvasList, () => pageView.resetLayout());\n            this.renderTextLayer(pageView.textLayerList, renderPageResults);\n            return;\n        });\n    }\n    createModule(b) {\n        return Promise.resolve(new RenderSession(this, this.renderer.create_session(b &&\n            this.createOptionsToRust({\n                format: 'vector',\n                artifactContent: b,\n            }))));\n    }\n    async createWorkerV0(worker) {\n        return new TypstWorker(this, await this.renderer.create_worker(worker));\n    }\n    workerBridge() {\n        return this.renderer.create_worker_bridge();\n    }\n    renderSvg(options, container) {\n        if (options instanceof RenderSession || container) {\n            throw new Error('removed api, please use renderToSvg({ renderSession, container }) instead');\n        }\n        return this.withinOptionSession(options, async (sessionRef) => {\n            let parts = undefined;\n            if (options.data_selection) {\n                parts = 0;\n                if (options.data_selection.body) {\n                    parts |= 1 << 0;\n                }\n                if (options.data_selection.defs) {\n                    parts |= 1 << 1;\n                }\n                if (options.data_selection.css) {\n                    parts |= 1 << 2;\n                }\n                if (options.data_selection.js) {\n                    parts |= 1 << 3;\n                }\n            }\n            return Promise.resolve(this.renderer.svg_data(sessionRef[kObject], parts));\n        });\n    }\n    renderSvgDiff(options) {\n        if (!options.window) {\n            return this.renderer.render_svg_diff(options.renderSession[kObject], 0, 0, 1e33, 1e33);\n        }\n        return this.renderer.render_svg_diff(options.renderSession[kObject], options.window.lo.x, options.window.lo.y, options.window.hi.x, options.window.hi.y);\n    }\n    renderToSvg(options) {\n        return this.withinOptionSession(options, async (sessionRef) => {\n            return Promise.resolve(this.renderer.render_svg(sessionRef[kObject], options.container));\n        });\n    }\n    getCustomV1(options) {\n        return Promise.resolve(this.renderer.get_customs(options.renderSession[kObject]));\n    }\n    resetSession(session) {\n        return this.renderer.reset(session[kObject]);\n    }\n    manipulateData(opts) {\n        return this.renderer.manipulate_data(opts.renderSession[kObject], opts.action ?? 'reset', opts.data);\n    }\n    withinOptionSession(options, fn) {\n        function isRenderByContentOption(options) {\n            return 'artifactContent' in options;\n        }\n        if ('renderSession' in options) {\n            return fn(options.renderSession);\n        }\n        if (isRenderByContentOption(options)) {\n            // todo: remove any\n            return this.runWithSession(options, fn);\n        }\n        throw new Error('Invalid render options, should be one of RenderByContentOptions|RenderBySessionOptions');\n    }\n    async runWithSession(arg1, arg2) {\n        let options = arg1;\n        let fn = arg2;\n        if (!arg2) {\n            options = undefined;\n            fn = arg1;\n        }\n        const session = this.renderer.create_session(\n        /* moved */ options && this.createOptionsToRust(options));\n        try {\n            const res = await fn(new RenderSession(this, session));\n            session.free();\n            return res;\n        }\n        catch (e) {\n            session.free();\n            throw e;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { buildComponent } from './init.mjs';\nimport { kObject } from './internal.types.mjs';\nimport { preloadRemoteFonts } from './options.init.mjs';\nimport { LazyWasmModule } from './wasm.mjs';\nexport class IncrementalServer {\n    /**\n     * @internal\n     */\n    [kObject];\n    /**\n     * @internal\n     */\n    constructor(s) {\n        this[kObject] = s;\n    }\n    /**\n     * Reset the incremental server to the initial state.\n     */\n    reset() {\n        this[kObject].reset();\n    }\n    /**\n     * Return current result.\n     */\n    current() {\n        return this[kObject].current();\n    }\n    /**\n     * Also attach the debug info to the result.\n     */\n    setAttachDebugInfo(enable) {\n        this[kObject].set_attach_debug_info(enable);\n    }\n}\nconst gCompilerModule = new LazyWasmModule(async (bin) => {\n    const module = await import('@myriaddreamin/typst-ts-web-compiler/pkg/wasm-pack-shim.mjs');\n    return await module.default(bin);\n});\n/**\n * create a Typst compiler.\n * @returns {TypstCompiler} - The Typst compiler.\n * @example\n * ```typescript\n * import { createTypstCompiler } from 'typst';\n * const compiler = createTypstCompiler();\n * await compiler.init();\n * compiler.addSource('/main.typ', 'Hello, typst!');\n * await compiler.compile({ mainFilePath: '/main.typ' });\n * ```\n */\nexport function createTypstCompiler() {\n    return new TypstCompilerDriver();\n}\nclass TypstCompilerDriver {\n    compiler;\n    compilerJs;\n    constructor() { }\n    async init(options) {\n        this.compilerJs = await import('@myriaddreamin/typst-ts-web-compiler/pkg/wasm-pack-shim.mjs');\n        const TypstCompilerBuilder = this.compilerJs.TypstCompilerBuilder;\n        const compilerOptions = { ...(options || {}) };\n        const hasPreloadRemoteFonts = compilerOptions.beforeBuild?.some((fn) => fn._preloadRemoteFontOptions !== undefined);\n        const hasSpecifiedAssets = compilerOptions.beforeBuild?.some((fn) => fn._preloadRemoteFontOptions?.assets !== undefined);\n        const hasDisableAssets = compilerOptions.beforeBuild?.some((fn) => fn._preloadRemoteFontOptions?.assets === false);\n        if (!hasPreloadRemoteFonts || (!hasSpecifiedAssets && !hasDisableAssets)) {\n            compilerOptions.beforeBuild?.push(preloadRemoteFonts([], {\n                assets: ['text'],\n            }));\n        }\n        this.compiler = await buildComponent(options, gCompilerModule, TypstCompilerBuilder, {});\n    }\n    compile(options) {\n        return new Promise(resolve => {\n            if ('incrementalServer' in options) {\n                resolve(this.compiler.incr_compile(options.mainFilePath, convertInputs(options.inputs), options.incrementalServer[kObject], getDiagnosticsArg(options.diagnostics)));\n                return;\n            }\n            resolve(this.compiler.compile(options.mainFilePath, convertInputs(options.inputs), options.format || 'vector', getDiagnosticsArg(options.diagnostics)));\n        });\n    }\n    query(options) {\n        return new Promise(resolve => {\n            resolve(JSON.parse(this.compiler.query(options.mainFilePath, convertInputs(options.inputs), options.selector, options.field)));\n        });\n    }\n    getSemanticTokenLegend() {\n        return new Promise(resolve => {\n            resolve(this.compiler.get_semantic_token_legend());\n        });\n    }\n    getSemanticTokens(opts) {\n        return new Promise(resolve => {\n            this.compiler.reset();\n            resolve(this.compiler.get_semantic_tokens(opts.offsetEncoding || 'utf-16', opts.mainFilePath, opts.resultId));\n        });\n    }\n    async withIncrementalServer(f) {\n        const srv = new IncrementalServer(this.compiler.create_incr_server());\n        try {\n            return await f(srv);\n        }\n        finally {\n            srv[kObject].free();\n        }\n    }\n    async getAst(mainFilePath) {\n        return this.compiler.get_ast(mainFilePath);\n    }\n    async reset() {\n        await new Promise(resolve => {\n            this.compiler.reset();\n            resolve(undefined);\n        });\n    }\n    addSource(path, source) {\n        if (arguments.length > 2) {\n            throw new Error('use of addSource(path, source, isMain) is deprecated, please use addSource(path, source) instead');\n        }\n        this.compiler.add_source(path, source);\n    }\n    mapShadow(path, content) {\n        this.compiler.map_shadow(path, content);\n    }\n    unmapShadow(path) {\n        this.compiler.unmap_shadow(path);\n    }\n    resetShadow() {\n        this.compiler.reset_shadow();\n    }\n    renderPageToCanvas() {\n        throw new Error('Please use the api TypstRenderer.renderToCanvas in v0.4.0');\n    }\n}\n// todo: caching inputs\nfunction convertInputs(inputs) {\n    return inputs ? Object.entries(inputs) : undefined;\n}\nfunction getDiagnosticsArg(diagnostics) {\n    switch (diagnostics) {\n        case 'none':\n            return 1;\n        case 'unix':\n            return 2;\n        case 'full':\n            return 3;\n        default:\n            return 0;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import React, { useState, useRef, useEffect } from 'react';\nimport * as typst from '@myriaddreamin/typst.ts';\n\nexport interface TypstDocumentProps {\n  artifact: ArrayBuffer | undefined;\n  domScale: number | undefined;\n}\n\nexport const TypstDocument = ({ artifact, domScale }: TypstDocumentProps) => {\n  /// --- beg: manipulate permission --- ///\n\n  // todo: acquire permission\n  const [permission, setPermissionInternal] = useState(false);\n  const setPermissionAndOk = (status: PermissionStatus) => {\n    if (status.state === 'granted') {\n      setPermissionInternal(true);\n      return true;\n    }\n    setPermissionInternal(false);\n    return false;\n  };\n  useEffect(() => {\n    navigator.permissions.query({ name: 'local-fonts' as PermissionName }).then(status => {\n      if (setPermissionAndOk(status)) {\n        return false;\n      }\n      status.addEventListener('change', event => {\n        console.log(event, status);\n        setPermissionAndOk(status);\n      });\n    });\n  });\n\n  /// --- end: manipulate permission --- ///\n\n  /// --- beg: update document --- ///\n  const displayDivRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!artifact) {\n      return;\n    }\n\n    let plugin = typst.createTypstRenderer();\n    console.log(plugin);\n\n    const tsModule = fetch(`/typst/typst_ts_renderer_bg.wasm`);\n\n    plugin.init({ getModule: () => tsModule })\n      .then(() => new Uint8Array(artifact))\n      .then(artifactData => {\n        return new Promise(resolve => {\n          plugin.runWithSession(\n            ses =>\n              new Promise(dispose => {\n                // ignore dispose\n                void dispose;\n\n                const t = performance.now();\n                const dom = plugin.renderDom({\n                  renderSession: ses,\n                  container: displayDivRef.current!,\n                  pixelPerPt: 4.5,\n                  domScale: domScale ?? 1.0,\n                });\n\n                dom.then((dom) => {\n                  console.log(dom);\n                  // FIXME: artifactData is not string type\n                  dom.addChangement(['new', artifactData as any as string]);\n                  console.log('render time', performance.now() - t);\n\n                  window.addEventListener('resize', () => dom.addViewportChange());\n                  window.addEventListener('scroll', () => dom.addViewportChange());\n                })\n              }),\n          );\n        });\n      });\n  }, [displayDivRef, artifact]);\n\n  /// --- end: update document --- ///\n\n  return (\n    <div>\n      <div className=\"typst-app\" ref={displayDivRef}></div>\n    </div>\n  );\n};\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { TypstDocument } from \"../components/typst-doc\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  const [artifactData, setArtifactData] = React.useState(undefined)\n\n  React.useEffect(() => {\n    fetch(post.source.artifact)\n      .then(response => response.arrayBuffer())\n      .then(data => {\n        console.log('fetch got artifact data with length', data.byteLength)\n        setArtifactData(data)\n      })\n  }, [post])\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section itemProp=\"articleBody\">\n          <TypstDocument artifact={artifactData} domScale={1.17} />\n        </section>\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    post(id: { eq: $id }) {\n      id\n      excerpt\n      source {\n        ... on Typst {\n          artifact\n        }\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: post(id: { eq: $previousPostId }) {\n      slug\n      frontmatter {\n        title\n      }\n    }\n    next: post(id: { eq: $nextPostId }) {\n      slug\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","'use strict';\nvar isPossiblePrototype = require('../internals/is-possible-prototype');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\nmodule.exports = function (argument) {\n  if (isPossiblePrototype(argument)) return argument;\n  throw new $TypeError(\"Can't set \" + $String(argument) + ' as a prototype');\n};\n","'use strict';\n// eslint-disable-next-line es/no-typed-arrays -- safe\nmodule.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';\n","'use strict';\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-basic-detection');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar globalThis = require('../internals/global-this');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar hasOwn = require('../internals/has-own-property');\nvar classof = require('../internals/classof');\nvar tryToString = require('../internals/try-to-string');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar uid = require('../internals/uid');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar Int8Array = globalThis.Int8Array;\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\nvar Uint8ClampedArray = globalThis.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\nvar TypedArray = Int8Array && getPrototypeOf(Int8Array);\nvar TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\nvar ObjectPrototype = Object.prototype;\nvar TypeError = globalThis.TypeError;\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\nvar TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(globalThis.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQUIRED = false;\nvar NAME, Constructor, Prototype;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar BigIntArrayConstructorsList = {\n  BigInt64Array: 8,\n  BigUint64Array: 8\n};\n\nvar isView = function isView(it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return klass === 'DataView'\n    || hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar getTypedArrayConstructor = function (it) {\n  var proto = getPrototypeOf(it);\n  if (!isObject(proto)) return;\n  var state = getInternalState(proto);\n  return (state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);\n};\n\nvar isTypedArray = function (it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar aTypedArray = function (it) {\n  if (isTypedArray(it)) return it;\n  throw new TypeError('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor = function (C) {\n  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;\n  throw new TypeError(tryToString(C) + ' is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod = function (KEY, property, forced, options) {\n  if (!DESCRIPTORS) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = globalThis[ARRAY];\n    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {\n      delete TypedArrayConstructor.prototype[KEY];\n    } catch (error) {\n      // old WebKit bug - some methods are non-configurable\n      try {\n        TypedArrayConstructor.prototype[KEY] = property;\n      } catch (error2) { /* empty */ }\n    }\n  }\n  if (!TypedArrayPrototype[KEY] || forced) {\n    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);\n  }\n};\n\nvar exportTypedArrayStaticMethod = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS) return;\n  if (setPrototypeOf) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = globalThis[ARRAY];\n      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {\n        delete TypedArrayConstructor[KEY];\n      } catch (error) { /* empty */ }\n    }\n    if (!TypedArray[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = globalThis[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      defineBuiltIn(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  Constructor = globalThis[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n  else NATIVE_ARRAY_BUFFER_VIEWS = false;\n}\n\nfor (NAME in BigIntArrayConstructorsList) {\n  Constructor = globalThis[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {\n  // eslint-disable-next-line no-shadow -- safe\n  TypedArray = function TypedArray() {\n    throw new TypeError('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (globalThis[NAME]) setPrototypeOf(globalThis[NAME], TypedArray);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\n  TypedArrayPrototype = TypedArray.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (globalThis[NAME]) setPrototypeOf(globalThis[NAME].prototype, TypedArrayPrototype);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\n  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\n}\n\nif (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQUIRED = true;\n  defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {\n    configurable: true,\n    get: function () {\n      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\n    }\n  });\n  for (NAME in TypedArrayConstructorsList) if (globalThis[NAME]) {\n    createNonEnumerableProperty(globalThis[NAME], TYPED_ARRAY_TAG, NAME);\n  }\n}\n\nmodule.exports = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,\n  aTypedArray: aTypedArray,\n  aTypedArrayConstructor: aTypedArrayConstructor,\n  exportTypedArrayMethod: exportTypedArrayMethod,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\n  getTypedArrayConstructor: getTypedArrayConstructor,\n  isView: isView,\n  isTypedArray: isTypedArray,\n  TypedArray: TypedArray,\n  TypedArrayPrototype: TypedArrayPrototype\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","'use strict';\nvar makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\n\nmodule.exports = function (object, key, method) {\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));\n  } catch (error) { /* empty */ }\n};\n","'use strict';\nvar classofRaw = require('../internals/classof-raw');\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = function (fn) {\n  // Nashorn bug:\n  //   https://github.com/zloirock/core-js/issues/1128\n  //   https://github.com/zloirock/core-js/issues/1130\n  if (classofRaw(fn) === 'Function') return uncurryThis(fn);\n};\n","'use strict';\nvar isObject = require('../internals/is-object');\n\nmodule.exports = function (argument) {\n  return isObject(argument) || argument === null;\n};\n","'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype : null;\n};\n","'use strict';\n/* eslint-disable no-proto -- safe */\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar isObject = require('../internals/is-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    requireObjectCoercible(O);\n    aPossiblePrototype(proto);\n    if (!isObject(O)) return O;\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","'use strict';\nvar toPositiveInteger = require('../internals/to-positive-integer');\n\nvar $RangeError = RangeError;\n\nmodule.exports = function (it, BYTES) {\n  var offset = toPositiveInteger(it);\n  if (offset % BYTES) throw new $RangeError('Wrong offset');\n  return offset;\n};\n","'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar $RangeError = RangeError;\n\nmodule.exports = function (it) {\n  var result = toIntegerOrInfinity(it);\n  if (result < 0) throw new $RangeError(\"The argument can't be less than 0\");\n  return result;\n};\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar call = require('../internals/function-call');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toOffset = require('../internals/to-offset');\nvar toIndexedObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\n\nvar RangeError = globalThis.RangeError;\nvar Int8Array = globalThis.Int8Array;\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\nvar $set = Int8ArrayPrototype && Int8ArrayPrototype.set;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\nvar WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS = !fails(function () {\n  // eslint-disable-next-line es/no-typed-arrays -- required for testing\n  var array = new Uint8ClampedArray(2);\n  call($set, array, { length: 1, 0: 3 }, 1);\n  return array[1] !== 3;\n});\n\n// https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other\nvar TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS && fails(function () {\n  var array = new Int8Array(2);\n  array.set(1);\n  array.set('2', 1);\n  return array[0] !== 0 || array[1] !== 2;\n});\n\n// `%TypedArray%.prototype.set` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set\nexportTypedArrayMethod('set', function set(arrayLike /* , offset */) {\n  aTypedArray(this);\n  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\n  var src = toIndexedObject(arrayLike);\n  if (WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS) return call($set, this, src, offset);\n  var length = this.length;\n  var len = lengthOfArrayLike(src);\n  var index = 0;\n  if (len + offset > length) throw new RangeError('Wrong length');\n  while (index < len) this[offset + index] = src[index++];\n}, !WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar uncurryThis = require('../internals/function-uncurry-this-clause');\nvar fails = require('../internals/fails');\nvar aCallable = require('../internals/a-callable');\nvar internalSort = require('../internals/array-sort');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar FF = require('../internals/environment-ff-version');\nvar IE_OR_EDGE = require('../internals/environment-is-ie-or-edge');\nvar V8 = require('../internals/environment-v8-version');\nvar WEBKIT = require('../internals/environment-webkit-version');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar Uint16Array = globalThis.Uint16Array;\nvar nativeSort = Uint16Array && uncurryThis(Uint16Array.prototype.sort);\n\n// WebKit\nvar ACCEPT_INCORRECT_ARGUMENTS = !!nativeSort && !(fails(function () {\n  nativeSort(new Uint16Array(2), null);\n}) && fails(function () {\n  nativeSort(new Uint16Array(2), {});\n}));\n\nvar STABLE_SORT = !!nativeSort && !fails(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 74;\n  if (FF) return FF < 67;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 602;\n\n  var array = new Uint16Array(516);\n  var expected = Array(516);\n  var index, mod;\n\n  for (index = 0; index < 516; index++) {\n    mod = index % 4;\n    array[index] = 515 - index;\n    expected[index] = index - 2 * mod + 3;\n  }\n\n  nativeSort(array, function (a, b) {\n    return (a / 4 | 0) - (b / 4 | 0);\n  });\n\n  for (index = 0; index < 516; index++) {\n    if (array[index] !== expected[index]) return true;\n  }\n});\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (y !== y) return -1;\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (x !== x) return 1;\n    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;\n    return x > y;\n  };\n};\n\n// `%TypedArray%.prototype.sort` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\nexportTypedArrayMethod('sort', function sort(comparefn) {\n  if (comparefn !== undefined) aCallable(comparefn);\n  if (STABLE_SORT) return nativeSort(this, comparefn);\n\n  return internalSort(aTypedArray(this), getSortCompare(comparefn));\n}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);\n"],"names":["Symbol","for","TypstDefaultParams","RenderView","pageInfos","loadPageCount","imageScaleFactor","container","canvasList","textLayerList","commonList","textLayerParentList","semanticLayerList","constructor","options","this","pixelPerPt","PIXEL_PER_PT","innerHTML","style","width","Array","createOver","i","pageAst","commonDiv","Math","ceil","height","canvas","document","createElement","semanticLayer","textLayer","textLayerParent","getContext","canvasDiv","appendChild","position","className","containerWidth","offsetWidth","originalScale","setProperty","classList","add","length","resetLayout","parentElement","Error","currentScale","transformOrigin","transform","LazyWasmModule","wasmBin","initOnce","initFn","fn","res","called","once","async","init","module","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","set","value","has","wrapFunction","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","storeName","store","index","shift","all","oldTraps","callback","ComponentBuilder","loadedFonts","Set","fetcher","fetch","setFetcher","loadFonts","builder","fonts","escapeImport","Function","fetchBuilder","FileSystemCache","cache","cacheDirectory","cachedFetcher","withCache","input","timeout","setTimeout","console","warn","finally","clearTimeout","fontsToLoad","filter","font","Uint8Array","fontLists","map","arrayBuffer","add_raw_font","build","hooks","buildCtx","ref","beforeBuild","latelyBuild","PreviewMode","TypstDocumentContext","hookedElem","kModule","opts","modes","partialRendering","renderMode","r","previewMode","Doc","isContentPreview","isMixinOutline","backgroundColor","pageColor","retrieveDOMState","isRendering","moduleInitialized","patchQueue","disposeList","canvasRenderCToken","currentRealScale","currentScaleRatio","vpTimeout","sampledRenderTime","partialRenderPage","outline","cursorPosition","cachedDOMState","window","innerWidth","innerHeight","boundingRect","left","top","right","offsetHeight","getBoundingClientRect","getComputedStyle","documentElement","getPropertyValue","Slide","installCtrlWheelHandler","reset","dispose","forEach","x","derive","ctx","mode","reduce","acc","bind","assert","registerMode","facade","push","factors","wheelEventHandler","event","ctrlKey","preventDefault","onresize","prevScaleRatio","deltaY","at","scrollFactor","scrollX","pageX","scrollY","pageY","abs","remove","svg","firstElementChild","scaleRatio","getSvgScaleRatio","dataHeight","Number","parseFloat","getAttribute","scaledHeight","scrollBy","addViewportChange","acquireVsCodeApi","passive","body","svgWidth","svgHeight","min","processQueue","svgUpdateEvent","eventName","manipulateData","action","data","log","triggerUpdate","doUpdate","postprocessChanges","t0","performance","now","ctoken","cancel","wait","needRerender","t1","rescale","rerender","t2","d","e","y","toFixed","join","requestAnimationFrame","postRender","querySelectorAll","textContent","retrievePagesInfo","addChangement","change","splice","pushChange","TypstCancellationToken","isCancellationRequested","_onCancelled","_onCancelledResolveResolved","resolveT","resolveX","isCancelRequested","consume","TrackMode","RepaintStage","ManageStatus","provideDomDoc","Base","tmpl","stub","plugin","docKernel","resourceHeader","pages","domScale","track_mode","current_task","viewport","super","renderer","page","free","content","mountDom","querySelector","mount_dom","bind_functions","populateGlyphs","append","cancelAnyway$dom","task","retrieveDOMPages","from","postRender$dom","rescale$dom","getDomViewport","cachedWindow","cachedBoundingRect","bottom","rect","max","rerender$dom","domState","relayout","doRender$dom","browserBBox","inWindow","renderPage","Layout","v","needCalc","stage","need_repaint","repaint","calc","needFrame","cb","condOrExit","wScale","hScale","Svg","Semantics","PrepareCanvas","Canvas","calcCanvasAfterPreparing","renderPages","idx","TypstDomDocument","impl","setPageColor","color","setPartialRendering","setCursor","setPartialPageNumber","getPartialPageNumber","setOutineData","provideDoc","mixins","mixin","composeDoc","RenderSession","o","t","background_color","pixel_per_pt","resetSession","doc_width","docWidth","doc_height","docHeight","pages_info","pageCount","page_count","pageOffset","page_off","width_pt","height_pt","getSourceLoc","path","source_span","renderSvg","renderSession","renderToSvg","renderCanvas","renderSvgDiff","get_source_loc","render_in_window","rect_lo_x","rect_lo_y","rect_hi_x","rect_hi_y","merge_delta","TypstWorker","manipulate_data","managedCanvasElemList","canvasCounter","random","canvasElemList","m","_","elem","Delete","elemId","dataset","manageId","Update","New","prev","entries","actions","elements","key","delete","canvasOptionsToRust","render_canvas","get_pages_info","warnOnceCanvasSet","TypstRendererDriver","rendererJs","getWrapper","TypstRendererBuilder","gModule","Builder","getModule","bin","default","loadGlyphPack","_pack","createOptionsToRust","rustOptions","CreateSessionOptions","format","artifactContent","artifact_content","RenderPageImageOptions","cacheKey","cache_key","dataSelection","encoded","text","annotation","semantics","data_selection","retrievePagesInfoFromSession","session","withinOptionSession","sessionRef","render_page_to_canvas","inAnimationFrame","renderDisplayLayer","doRender","textContentList","results","renderTextLayer","layerList","textSourceList","layer","htmlSemantics","t3","render","renderToCanvas","renderDom","renderPageResults","mountContainer","visibility","doRenderDisplayLayer","test","pageView","createModule","b","create_session","createWorkerV0","worker","create_worker","workerBridge","create_worker_bridge","parts","defs","css","js","svg_data","render_svg_diff","lo","hi","render_svg","getCustomV1","get_customs","isRenderByContentOption","runWithSession","arg1","arg2","TypstDocument","_ref","artifact","permission","setPermissionInternal","useState","setPermissionAndOk","status","state","useEffect","navigator","permissions","query","name","displayDivRef","useRef","tsModule","artifactData","ses","current","dom","React","Head","_ref2","post","Seo","title","frontmatter","description","excerpt","_site$siteMetadata","previous","next","site","location","siteTitle","siteMetadata","setArtifactData","source","response","byteLength","itemScope","itemType","itemProp","date","Bio","display","flexWrap","justifyContent","listStyle","padding","Link","to","slug","rel","isPossiblePrototype","$String","String","$TypeError","TypeError","exports","argument","ArrayBuffer","DataView","NAME","Constructor","Prototype","NATIVE_ARRAY_BUFFER","DESCRIPTORS","globalThis","isCallable","isObject","hasOwn","classof","tryToString","createNonEnumerableProperty","defineBuiltIn","defineBuiltInAccessor","isPrototypeOf","getPrototypeOf","setPrototypeOf","wellKnownSymbol","uid","InternalStateModule","enforceInternalState","enforce","getInternalState","Int8Array","Int8ArrayPrototype","Uint8ClampedArray","Uint8ClampedArrayPrototype","TypedArray","TypedArrayPrototype","ObjectPrototype","Object","TO_STRING_TAG","TYPED_ARRAY_TAG","TYPED_ARRAY_CONSTRUCTOR","NATIVE_ARRAY_BUFFER_VIEWS","opera","TYPED_ARRAY_TAG_REQUIRED","TypedArrayConstructorsList","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigIntArrayConstructorsList","BigInt64Array","BigUint64Array","getTypedArrayConstructor","it","proto","isTypedArray","klass","configurable","aTypedArray","aTypedArrayConstructor","C","exportTypedArrayMethod","KEY","property","forced","ARRAY","TypedArrayConstructor","error2","exportTypedArrayStaticMethod","isView","fails","F","makeBuiltIn","defineProperty","descriptor","getter","setter","f","uncurryThis","aCallable","getOwnPropertyDescriptor","classofRaw","toObject","sharedKey","CORRECT_PROTOTYPE_GETTER","IE_PROTO","$Object","O","uncurryThisAccessor","requireObjectCoercible","aPossiblePrototype","CORRECT_SETTER","__proto__","toPositiveInteger","$RangeError","RangeError","BYTES","offset","toIntegerOrInfinity","ArrayBufferViewCore","lengthOfArrayLike","toOffset","toIndexedObject","$set","WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS","array","TO_OBJECT_BUG","arrayLike","arguments","src","len","internalSort","FF","IE_OR_EDGE","V8","WEBKIT","nativeSort","ACCEPT_INCORRECT_ARGUMENTS","STABLE_SORT","mod","expected","a","comparefn","getSortCompare"],"sourceRoot":""}